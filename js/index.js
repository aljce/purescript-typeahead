// Generated by psc-bundle 0.8.5.0
var PS = {};
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Prelude"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };                                                                           
  var unit = {};                                                         
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (dictApplicative) {
      return pure(dictApplicative);
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (dictFunctor) {
      return map(dictFunctor);
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var bind = function (dict) {
      return dict.bind;
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (dictApply) {
      return apply(dictApply);
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $less$greater = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                  return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                      return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports["compose"] = compose;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorArray"] = functorArray;
  exports["semigroupArray"] = semigroupArray;
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var $times$greater = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  exports["*>"] = $times$greater;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports._setTimeout = function (nonCanceler, millis, aff) {
    var set = setTimeout, clear = clearTimeout;
    if (millis <= 0 && typeof setImmediate === "function") {
      set = setImmediate;
      clear = clearImmediate;
    }
    return function(success, error) {
      var canceler;

      var timeout = set(function() {
        canceler = aff(success, error);
      }, millis);

      return function(e) {
        return function(s, f) {
          if (canceler !== undefined) {
            return canceler(e)(s, f);
          } else {
            clear(timeout);

            try {
              s(true);
            } catch (err) {
              f(err);
            }

            return nonCanceler;
          }
        };
      };
    };
  }

  exports._unsafeInterleaveAff = function (aff) {
    return aff;
  }

  exports._pure = function (nonCanceler, v) {
    return function(success, error) {
      try {
        success(v);
      } catch (err) {
        error(err);
      }

      return nonCanceler;
    };
  }

  exports._fmap = function (f, aff) {
    return function(success, error) {
      return aff(function(v) {
        try {
          success(f(v));
        } catch (err) {
          error(err);
        }
      }, error);
    };
  }

  exports._bind = function (alwaysCanceler, aff, f) {
    return function(success, error) {
      var canceler1, canceler2;

      var isCanceled    = false;
      var requestCancel = false;

      var onCanceler = function(){};

      canceler1 = aff(function(v) {
        if (requestCancel) {
          isCanceled = true;

          return alwaysCanceler;
        } else {
          canceler2 = f(v)(success, error);

          onCanceler(canceler2);

          return canceler2;
        }
      }, error);

      return function(e) {
        return function(s, f) {
          requestCancel = true;

          if (canceler2 !== undefined) {
            return canceler2(e)(s, f);
          } else {
            return canceler1(e)(function(bool) {
              if (bool || isCanceled) {
                try {
                  s(true);
                } catch (err) {
                  f(err);
                }
              } else {
                onCanceler = function(canceler) {
                  canceler(e)(s, f);
                };
              }
            }, f);
          }
        };
      };
    };
  }

  exports._runAff = function (errorT, successT, aff) {
    return function() {
      return aff(function(v) {
        try {
          successT(v)();
        } catch (err) {
          errorT(err)();
        }
      }, function(e) {
        errorT(e)();
      });
    };
  }

  exports._liftEff = function (nonCanceler, e) {
    return function(success, error) {
      try {
        success(e());
      } catch (err) {
        error(err);
      }

      return nonCanceler;
    };
  }
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];        
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (__superclass_Prelude$dotMonad_0, liftEff) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.liftEff = liftEff;
  };                                 
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];        
  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
      this.mempty = mempty;
  };     
  var monoidArray = new Monoid(function () {
      return Prelude.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidArray"] = monoidArray;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["throwException"] = $foreign.throwException;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($161) {
                  return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(f($161));
              })(Prelude.pure(dictApplicative)(Prelude.unit));
          };
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Prelude.id(Prelude.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["sequence_"] = sequence_;
  exports["traverse_"] = traverse_;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  exports["runFn3"] = $foreign.runFn3;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var runAff = function (ex) {
      return function (f) {
          return function (aff) {
              return $foreign._runAff(ex, f, aff);
          };
      };
  };
  var launchAff = function ($20) {
      return runAff(Control_Monad_Eff_Exception.throwException)(Prelude["const"](Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit)))($foreign._unsafeInterleaveAff($20));
  };
  var functorAff = new Prelude.Functor(function (f) {
      return function (fa) {
          return $foreign._fmap(f, fa);
      };
  });
  var applyAff = new Prelude.Apply(function () {
      return functorAff;
  }, function (ff) {
      return function (fa) {
          return $foreign._bind(alwaysCanceler, ff, function (f) {
              return Prelude["<$>"](functorAff)(f)(fa);
          });
      };
  });
  var applicativeAff = new Prelude.Applicative(function () {
      return applyAff;
  }, function (v) {
      return $foreign._pure(nonCanceler, v);
  });
  var nonCanceler = Prelude["const"](Prelude.pure(applicativeAff)(false));
  var alwaysCanceler = Prelude["const"](Prelude.pure(applicativeAff)(true));
  var later$prime = function (n) {
      return function (aff) {
          return $foreign._setTimeout(nonCanceler, n, aff);
      };
  };
  var later = later$prime(0);                              
  var bindAff = new Prelude.Bind(function () {
      return applyAff;
  }, function (fa) {
      return function (f) {
          return $foreign._bind(alwaysCanceler, fa, f);
      };
  });
  var monadAff = new Prelude.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, function (eff) {
      return $foreign._liftEff(nonCanceler, eff);
  });
  exports["runAff"] = runAff;
  exports["nonCanceler"] = nonCanceler;
  exports["launchAff"] = launchAff;
  exports["later"] = later;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadEffAff"] = monadEffAff;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["snd"] = snd;
  exports["fst"] = fst;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Maybe.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];        
  var fromJust = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
      };
      throw new Error("Failed pattern match at Data.Maybe.Unsafe line 11, column 1 - line 12, column 1: " + [ v.constructor.name ]);
  };
  exports["fromJust"] = fromJust;
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var singleton = function (a) {
      return [ a ];
  };
  exports["singleton"] = singleton;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];        
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  }; 
  var dimap = function (dict) {
      return dict.dimap;
  };
  exports["Profunctor"] = Profunctor;
  exports["dimap"] = dimap;
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Tuple = PS["Data.Tuple"];        
  var Strong = function (__superclass_Data$dotProfunctor$dotProfunctor_0, first, second) {
      this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
      this.first = first;
      this.second = second;
  };                                          
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  exports["Strong"] = Strong;
  exports["second"] = second;
  exports["first"] = first;
})(PS["Data.Profunctor.Strong"] = PS["Data.Profunctor.Strong"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Const = PS["Data.Const"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Cochoice = PS["Data.Profunctor.Cochoice"];
  var Data_Lens_Internal_Wander = PS["Data.Lens.Internal.Wander"];
  var runForget = function (v) {
      return v;
  };
  var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
      return function (v) {
          return function (v1) {
              return function ($24) {
                  return v1(f($24));
              };
          };
      };
  });
  var strongForget = new Data_Profunctor_Strong.Strong(function () {
      return profunctorForget;
  }, function (v) {
      return function ($25) {
          return v(Data_Tuple.fst($25));
      };
  }, function (v) {
      return function ($26) {
          return v(Data_Tuple.snd($26));
      };
  });
  exports["runForget"] = runForget;
  exports["profunctorForget"] = profunctorForget;
  exports["strongForget"] = strongForget;
})(PS["Data.Lens.Internal.Forget"] = PS["Data.Lens.Internal.Forget"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Const = PS["Data.Const"];
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Star = PS["Data.Profunctor.Star"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Types_2 = PS["Data.Lens.Types"];
  var Data_Lens_Types_2 = PS["Data.Lens.Types"];
  var Data_Lens_Types_2 = PS["Data.Lens.Types"];
  var Data_Lens_Internal_Indexed = PS["Data.Lens.Internal.Indexed"];        
  var view = function (l) {
      return Data_Lens_Internal_Forget.runForget(l(Prelude.id(Prelude.categoryFn)));
  };
  var $up$dot = function (s) {
      return function (l) {
          return view(l)(s);
      };
  };
  exports["view"] = view;
  exports["^."] = $up$dot;
})(PS["Data.Lens.Getter"] = PS["Data.Lens.Getter"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Lens_Internal_Shop = PS["Data.Lens.Internal.Shop"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var lens$prime = function (to) {
      return function (dictStrong) {
          return function (pab) {
              return Data_Profunctor.dimap(dictStrong["__superclass_Data.Profunctor.Profunctor_0"]())(to)(function (v) {
                  return v.value1(v.value0);
              })(Data_Profunctor_Strong.first(dictStrong)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (dictStrong) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(dictStrong);
          };
      };
  };
  exports["lens"] = lens;
})(PS["Data.Lens.Lens"] = PS["Data.Lens.Lens"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var $colon = Cons.create;
  var singleton = function (a) {
      return new Cons(a, Nil.value);
  }; 
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 371, column 1 - line 379, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var functorList = new Prelude.Functor(function (f) {
      return function (lst) {
          var go = function (__copy_v) {
              return function (__copy_acc) {
                  var v = __copy_v;
                  var acc = __copy_acc;
                  tco: while (true) {
                      if (v instanceof Nil) {
                          return acc;
                      };
                      if (v instanceof Cons) {
                          var __tco_v = v.value1;
                          var __tco_acc = new Cons(f(v.value0), acc);
                          v = __tco_v;
                          acc = __tco_acc;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 758, column 3 - line 764, column 1: " + [ v.constructor.name, acc.constructor.name ]);
                  };
              };
          };
          return reverse(go(lst)(Nil.value));
      };
  });
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Cons.create)(Nil.value);
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($374) {
                  return Prelude.append(dictMonoid["__superclass_Prelude.Semigroup_0"]())(acc)(f($374));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_v) {
          return function (__copy_b) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var b = __copy_b;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v1 instanceof Nil) {
                          return b;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v;
                          var __tco_b = v(b)(v1.value0);
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          b = __tco_b;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 767, column 3 - line 771, column 3: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (v) {
      return function (b) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return b;
              };
              if (v1 instanceof Cons) {
                  return v(v1.value0)(Data_Foldable.foldr(foldableList)(v)(b)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.List line 765, column 3 - line 766, column 3: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["reverse"] = reverse;
  exports[":"] = $colon;
  exports["singleton"] = singleton;
  exports["fromFoldable"] = fromFoldable;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
    "use strict";

  // module Pux

  var React = (typeof require === 'function' && require('react'))
           || (typeof window === 'object' && window.React);

  function reactClass(htmlSignal) {
    return React.createClass({
      componentWillMount: function () {
        var ctx = this;
        htmlSignal.subscribe(function () {
          ctx.forceUpdate();
        });
      },
      render: function () {
        return htmlSignal.get()
      }
    });
  }

  exports.renderToDOM = function (selector) {
    var ReactDOM = (typeof require === 'function' && require('react-dom'))
                || (typeof window === 'object' && window.ReactDOM);
    return function (htmlSignal) {
      var elem = React.createElement(reactClass(htmlSignal));
      ReactDOM.render(elem, document.querySelector(selector))
      return function () {};
    };
  };

  exports.render = function (input, parentAction, html) {
    if (typeof html === 'string') {
      html = React.createElement('div', null, [html]);
    }

    function composeAction(parentAction, html) {
      var childAction = html.props && html.props.puxParentAction;
      var action = parentAction;
      if (childAction) {
        action = function (a) {
          return parentAction(childAction(a));
        };
      }
      return action;
    }

    function render(input, parentAction, html) {
      var props = html.props
      var newProps = {};

      for (var key in props) {
        if (key !== 'puxParentAction' && typeof props[key] === 'function') {
          newProps[key] = props[key](input, parentAction);
        }
      }

      var newChildren = React.Children.map(html.props.children, function (child) {
        if (typeof child === 'string') {
          return child;
        } else {
          return render(input, composeAction(parentAction, child), child);
        }
      });

      return React.cloneElement(html, newProps, newChildren);
    }

    return render(input, composeAction(parentAction, html), html);
  };
})(PS["Pux"] = PS["Pux"] || {});
(function(exports) {
    'use strict';                                          

  exports.append = function (html1, html2) {
    if (!Array.isArray(html1)) html1 = [html1];
    if (!Array.isArray(html2)) html2 = [html2];
    return html1.concat(html2);
  };
})(PS["Pux.Html"] = PS["Pux.Html"] || {});
(function(exports) {
    'use strict';

  // module Pux.Html.Elements

  var React = (typeof require === 'function' && require('react'))
           || (typeof window === 'object' && window.React);

  exports.text = function (text) {
    return text;
  };

  exports.element = function (tagName, attrs, children) {
    if (Array.isArray(children[0])) children = children[0];

    var props = attrs.reduce(function (obj, attr) {
      var key = attr[0];
      var val = attr[1];
      obj[key] = val;
      return obj;
    }, {});

    return React.createElement.apply(React, [tagName, props].concat(children));
  };
})(PS["Pux.Html.Elements"] = PS["Pux.Html.Elements"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Pux.Html.Elements"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];                            
  var ul = Data_Function.runFn3($foreign.element)("ul");
  var div = Data_Function.runFn3($foreign.element)("div");
  exports["ul"] = ul;
  exports["div"] = div;
  exports["text"] = $foreign.text;
})(PS["Pux.Html.Elements"] = PS["Pux.Html.Elements"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Pux.Html"];
  var Data_Array = PS["Data.Array"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var Pux_Html_Elements_1 = PS["Pux.Html.Elements"];
  var Pux_Html_Elements_1 = PS["Pux.Html.Elements"];
  var withChild = function (f) {
      return function (html) {
          return f([  ])(Data_Array.singleton(html));
      };
  };
  var bind = function (x) {
      return function (f) {
          return $foreign.append(x, f(Prelude.unit));
      };
  };
  exports["withChild"] = withChild;
  exports["bind"] = bind;
})(PS["Pux.Html"] = PS["Pux.Html"] || {});
(function(exports) {// module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };

  exports.merge = function(sig1) {
    return function(sig2) {
      var out = make(sig1.get());
      sig2.subscribe(out.set);
      sig1.subscribe(out.set);
      return out;
    };
  };

  exports.foldp = function(fun) {
    return function(seed) {
      return function(sig) {
        var acc = seed;
        var out = make(acc);
        sig.subscribe(function(val) {
          acc = fun(val)(acc);
          out.set(acc);
        });
        return out;
      };
    };
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Signal"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];                        
  var mergeMany = function (dictFunctor) {
      return function (dictFoldable) {
          return function (sigs) {
              var mergeMaybe = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return v;
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          return v1;
                      };
                      if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                          return new Data_Maybe.Just($foreign.merge(v.value0)(v1.value0));
                      };
                      throw new Error("Failed pattern match at Signal line 52, column 9 - line 53, column 9: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Foldable.foldl(dictFoldable)(mergeMaybe)(Data_Maybe.Nothing.value)(Prelude["<$>"](dictFunctor)(Data_Maybe.Just.create)(sigs));
          };
      };
  };
  var functorSignal = new Prelude.Functor($foreign.mapSig);
  var flippedMap = function (dictFunctor) {
      return Prelude.flip(Prelude.map(dictFunctor));
  };
  exports["flippedMap"] = flippedMap;
  exports["mergeMany"] = mergeMany;
  exports["functorSignal"] = functorSignal;
  exports["runSignal"] = $foreign.runSignal;
  exports["foldp"] = $foreign.foldp;
  exports["constant"] = $foreign.constant;
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {// module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan, v) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];        
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["send"] = send;
  exports["channel"] = channel;
  exports["subscribe"] = $foreign.subscribe;
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Pux"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_List = PS["Data.List"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Pux_Html = PS["Pux.Html"];
  var React = PS["React"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];
  var noEffects = function (state) {
      return {
          state: state, 
          effects: [  ]
      };
  };
  var start = function (config) {
      return function __do() {
          var v = Signal_Channel.channel(Data_List.Nil.value)();
          var mapAffect = function (affect) {
              return Control_Monad_Aff.launchAff(Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.later(affect))(function (v1) {
                  return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Signal_Channel.send(v)(Data_List.singleton(v1)));
              }));
          };
          var foldState = function (effModel) {
              return function (action) {
                  return config.update(action)(effModel.state);
              };
          };
          var foldActions = function (actions) {
              return function (effModel) {
                  return Data_Foldable.foldl(Data_List.foldableList)(foldState)(noEffects(effModel.state))(actions);
              };
          };
          var actionSignal = Signal_Channel.subscribe(v);
          var input = Data_Maybe_Unsafe.fromJust(Signal.mergeMany(Data_List.functorList)(Data_List.foldableList)(Data_List.reverse(Data_List[":"](actionSignal)(Prelude.map(Data_List.functorList)(Prelude.map(Signal.functorSignal)(Data_List.singleton))(Data_List.fromFoldable(Data_Foldable.foldableArray)(config.inputs))))));
          var effModelSignal = Signal.foldp(foldActions)(noEffects(config.initialState))(input);
          var effectsSignal = Signal.flippedMap(Signal.functorSignal)(effModelSignal)(function ($6) {
              return Prelude.map(Prelude.functorArray)(mapAffect)((function (v1) {
                  return v1.effects;
              })($6));
          });
          var stateSignal = Signal.flippedMap(Signal.functorSignal)(effModelSignal)(function (v1) {
              return v1.state;
          });
          var htmlSignal = Signal.flippedMap(Signal.functorSignal)(stateSignal)(function (state) {
              return $foreign.render(function ($7) {
                  return Signal_Channel.send(v)(Data_List.singleton($7));
              }, function (a) {
                  return a;
              }, config.view(state));
          });
          Signal.runSignal(Signal.flippedMap(Signal.functorSignal)(effectsSignal)(Data_Foldable.sequence_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)))();
          return {
              html: htmlSignal, 
              state: stateSignal
          };
      };
  };
  exports["start"] = start;
  exports["noEffects"] = noEffects;
  exports["renderToDOM"] = $foreign.renderToDOM;
})(PS["Pux"] = PS["Pux"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Pux_Html = PS["Pux.Html"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Lens = PS["Data.Lens.Lens"];        
  var StateTA = (function () {
      function StateTA(value0) {
          this.value0 = value0;
      };
      StateTA.create = function (value0) {
          return new StateTA(value0);
      };
      return StateTA;
  })();
  var showOptions = function (dictStrong) {
      var setter = function (v) {
          return function (sOpts) {
              return new StateTA((function () {
                  var $17 = {};
                  for (var $18 in v.value0) {
                      if (v.value0.hasOwnProperty($18)) {
                          $17[$18] = v.value0[$18];
                      };
                  };
                  $17._showOptions = sOpts;
                  return $17;
              })());
          };
      };
      var getter = function (v) {
          return v.value0._showOptions;
      };
      return Data_Lens_Lens.lens(getter)(setter)(dictStrong);
  };
  var renderElem = function (dictStrong) {
      var setter = function (v) {
          return function (rElem) {
              return new StateTA((function () {
                  var $25 = {};
                  for (var $26 in v.value0) {
                      if (v.value0.hasOwnProperty($26)) {
                          $25[$26] = v.value0[$26];
                      };
                  };
                  $25._renderElem = rElem;
                  return $25;
              })());
          };
      };
      var getter = function (v) {
          return v.value0._renderElem;
      };
      return Data_Lens_Lens.lens(getter)(setter)(dictStrong);
  };
  var options = function (dictStrong) {
      var setter = function (v) {
          return function (opts) {
              return new StateTA((function () {
                  var $33 = {};
                  for (var $34 in v.value0) {
                      if (v.value0.hasOwnProperty($34)) {
                          $33[$34] = v.value0[$34];
                      };
                  };
                  $33._options = opts;
                  return $33;
              })());
          };
      };
      var getter = function (v) {
          return v.value0._options;
      };
      return Data_Lens_Lens.lens(getter)(setter)(dictStrong);
  };
  var element = function (dictStrong) {
      var setter = function (v) {
          return function (elem) {
              return new StateTA((function () {
                  var $41 = {};
                  for (var $42 in v.value0) {
                      if (v.value0.hasOwnProperty($42)) {
                          $41[$42] = v.value0[$42];
                      };
                  };
                  $41._element = elem;
                  return $41;
              })());
          };
      };
      var getter = function (v) {
          return v.value0._element;
      };
      return Data_Lens_Lens.lens(getter)(setter)(dictStrong);
  };
  exports["StateTA"] = StateTA;
  exports["options"] = options;
  exports["showOptions"] = showOptions;
  exports["renderElem"] = renderElem;
  exports["element"] = element;
})(PS["TypeAhead.States"] = PS["TypeAhead.States"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Array = PS["Data.Array"];
  var Pux = PS["Pux"];
  var Pux_Html = PS["Pux.Html"];
  var TypeAhead_States = PS["TypeAhead.States"];
  var Data_Lens_Getter = PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Pux_Html_Elements = PS["Pux.Html.Elements"];
  var Data_Monoid = PS["Data.Monoid"];        
  var renderTA = function (dictFoldable) {
      return function (state) {
          var renderedOpts = Data_Lens_Getter["^."](state)(TypeAhead_States.showOptions(Data_Lens_Internal_Forget.strongForget))(Data_Lens_Getter["^."](state)(TypeAhead_States.element(Data_Lens_Internal_Forget.strongForget)))(Data_Lens_Getter["^."](state)(TypeAhead_States.options(Data_Lens_Internal_Forget.strongForget)));
          return Pux_Html.withChild(Pux_Html_Elements.div)(Pux_Html.bind(Data_Lens_Getter["^."](state)(TypeAhead_States.renderElem(Data_Lens_Internal_Forget.strongForget))(Data_Lens_Getter["^."](state)(TypeAhead_States.element(Data_Lens_Internal_Forget.strongForget))))(function () {
              return Pux_Html_Elements.ul([  ])(Data_Foldable.foldMap(dictFoldable)(Data_Monoid.monoidArray)(Data_Array.singleton)(renderedOpts));
          }));
      };
  };
  exports["renderTA"] = renderTA;
})(PS["TypeAhead.Render"] = PS["TypeAhead.Render"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Pux = PS["Pux"];
  var TypeAhead_States = PS["TypeAhead.States"];
  var simpleUpdateTA = function (v) {
      return function (state) {
          return state;
      };
  };
  var updateTA = function (action) {
      return function ($4) {
          return Pux.noEffects(simpleUpdateTA(action)($4));
      };
  };
  exports["updateTA"] = updateTA;
  exports["simpleUpdateTA"] = simpleUpdateTA;
})(PS["TypeAhead.Update"] = PS["TypeAhead.Update"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Pux = PS["Pux"];
  var Pux_Html = PS["Pux.Html"];
  var TypeAhead_States = PS["TypeAhead.States"];
  var TypeAhead_Render = PS["TypeAhead.Render"];
  var TypeAhead_Update = PS["TypeAhead.Update"];
  var Pux_Html_Elements = PS["Pux.Html.Elements"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foldable = PS["Data.Foldable"];        
  var testState = new TypeAhead_States.StateTA({
      _buildElem: Prelude.id(Prelude.categoryFn), 
      _element: "Testing", 
      _renderElem: Pux_Html_Elements.text, 
      _showOptions: function (v) {
          return function (opts) {
              return Prelude.map(Prelude.functorArray)(Pux_Html_Elements.text)(opts);
          };
      }, 
      _options: [ "Kyle", "James", "Andrew" ]
  });
  var main = function __do() {
      var v = Pux.start({
          initialState: testState, 
          update: TypeAhead_Update.updateTA, 
          view: TypeAhead_Render.renderTA(Data_Foldable.foldableArray), 
          inputs: [  ]
      })();
      return Pux.renderToDOM("#app")(v.html)();
  };
  exports["main"] = main;
  exports["testState"] = testState;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
